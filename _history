{"entries":[{"timestamp":1744375712064,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"re\":"],[-1," \"*\",\n        \"v3\": \"*\",\n        \"funk\":"],[0," \"*\""]],"start1":90,"start2":90,"length1":48,"length2":8},{"diffs":[[0,".md\""],[-1,",\n        \"shared.ts\""],[0,"\n   "]],"start1":155,"start2":155,"length1":29,"length2":8},{"diffs":[[0,"pt-only\""],[1,",\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":235,"start2":235,"length1":11,"length2":42}]},{"type":"added","filename":"shared.ts","value":"/**\n * Shared Variables\n */\n//% weight=100 color=#f03056 icon=\"ᯤ\"\nnamespace shared {\n    /**\n     * reference only, not used\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    function foo (n: number, s: string): void {\n        // Add code here\n    }\n\n    let names = []\n    let values = []\n\n    //%block\n    export function init(group: number = 1) {\n        radio.setGroup(group)\n    }\n\n    export function receive (received_string: string) {\n        let parts = received_string.split(\";\")\n        let task = parts[0]\n        let variable_name = parts[1]\n\n        if (task == \"s\") { //set\n\n        }\n        elif (task == \"\")\n    }\n\n    export function set () {\n\n    }\n\n    export function get () {\n\n    }\n}\n\n\nradio.onReceivedString(function(receivedString: string) {\n    shared.receive(receivedString)\n})"}]},{"timestamp":1744376311357,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"shared.init()"],[1,"\n"]],"start1":0,"start2":0,"length1":13,"length2":1}]},{"type":"edited","filename":"shared.ts","patch":[{"diffs":[[0,"set\n"],[-1,"    "],[1,"\n"],[0,"        "],[-1,"let variable_type = parts[2]\n            let value = null\n\n            switch (variable_type) {\n                case \"n\": //number\n                    value = +parts[3]\n                    break\n                case \"s\": //string\n                    value = parts[3]\n                    break\n                case \"l\": //list\n                    value = JSON.parse(parts[3])\n                    break\n            }\n\n            if (names.indexOf(\"\"))\n\n            return\n        }"],[1,"}\n        elif (task == \"\")"],[0,"\n   "]],"start1":742,"start2":742,"length1":500,"length2":44}]}]},{"timestamp":1744376903979,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"shared.ts","patch":[{"diffs":[[0,"et names"],[-1,": any[]"],[0," = []\n  "]],"start1":413,"start2":413,"length1":23,"length2":16},{"diffs":[[0,"lues"],[-1,": any[]"],[0," = ["]],"start1":437,"start2":437,"length1":15,"length2":8},{"diffs":[[0,"tring) {"],[-1," //TODO: sync_only"],[0,"\n       "]],"start1":591,"start2":591,"length1":34,"length2":16},{"diffs":[[0,"xOf("],[-1,"variable_name) == -1) {\n                names.push(variable_name)\n                values.push(value)\n                return\n            }\n\n            values[names.indexOf(variable_name)] = value\n        }\n    }\n\n    //%block\n    export function set (variable_name: string, value: number|string|any[]) { //TODO: sync_only\n        if (names.indexOf(variable_name) == -1) {\n            names.push(variable_name)\n            values.push(value)\n        }\n        else {\n            values[names.indexOf(variable_name)] = value\n        }\n\n        \n    }\n\n    //%block\n    export function get (variable_name: string) {\n        if (names.indexOf(variable_name) == -1) { return }\n        return values[names.indexOf(variable_name)]"],[1,"\"\"))\n\n            return\n        }\n    }\n\n    export function set () {\n\n    }\n\n    export function get () {\n"],[0,"\n   "]],"start1":1200,"start2":1200,"length1":731,"length2":116}]}]},{"timestamp":1744377509807,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"shared.ts","patch":[{"diffs":[[0,"    "],[-1,"let str"],[0,"\n   "]],"start1":1774,"start2":1774,"length1":15,"length2":8}]}]},{"timestamp":1744377511223,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"console.log(JSON.stringify(\"hello\"))\nconsole.log(JSON.stringify(\"123\"))\nconsole.log(JSON.stringify('[\"just\", \"a\", \"test\"]')"],[1,"shared.init("],[0,")"]],"start1":0,"start2":0,"length1":124,"length2":13}]},{"type":"edited","filename":"shared.ts","patch":[{"diffs":[[0,"let "],[-1,"variable_type = null\n\n        switch (typeof value) {\n            case \"number\":\n                variable_type = \"n\"\n                break\n            case \"string\":\n                variable_type = \"s\"\n                break\n                variable_type = \"l\"\n        }\n\n        let str = \"s;\" + variable_name + \";\" + variable_type + \";\" + JSON.stringify(value)"],[1,"str"],[0,"\n   "]],"start1":1778,"start2":1778,"length1":369,"length2":11}]}]},{"timestamp":1744377853570,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"est\"]'))"],[-1,"\n"]],"start1":116,"start2":116,"length1":9,"length2":8}]}]},{"timestamp":1744379058154,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"'))\n"],[-1,"console.log()"]],"start1":121,"start2":121,"length1":17,"length2":4}]}]},{"timestamp":1744379061220,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"'))\n"],[-1,"let a = [\"just\", \"a\", \"test\"]\nconsole.log(a == JSON.parse(JSON.stringify(a))"],[1,"console.log("],[0,")"]],"start1":121,"start2":121,"length1":81,"length2":17}]}]},{"timestamp":1744379221489,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"shared.ts","patch":[{"diffs":[[0," }\n\n"],[-1,"    \n\n"],[0,"    "]],"start1":404,"start2":404,"length1":14,"length2":8}]}]},{"timestamp":1744395964599,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"shared.ts","patch":[{"diffs":[[0," }\n\n    "],[-1,"//"],[0,"\n\n    le"]],"start1":404,"start2":404,"length1":18,"length2":16}]}]},{"timestamp":1744395966254,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"console.log(JSON.stringify(\"hello\"))\nconsole.log(JSON.stringify(\"123\"))\nconsole.log(JSON.stringify('[\"just\", \"a\", \"test\"]'))\nlet a = [\"just\", \"a\", \"test\"]\nconsole.log(a == JSON.parse(JSON.stringify(a)))"]],"start1":0,"start2":0,"length1":0,"length2":202}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":224,"start2":224,"length1":52,"length2":8}]},{"type":"edited","filename":"shared.ts","patch":[{"diffs":[[0,"here\n    }\n\n"],[1,"    //\n\n"],[0,"    let name"]],"start1":396,"start2":396,"length1":24,"length2":32},{"diffs":[[0,"up)\n"],[-1,"        radio.setTransmitPower(7)\n"],[0,"    "]],"start1":555,"start2":555,"length1":42,"length2":8},{"diffs":[[0,"lue)"],[-1,"\n\n        radio.sendString(str)"],[0,"\n   "]],"start1":2147,"start2":2147,"length1":39,"length2":8}]},{"type":"added","filename":"test.ts","value":"// Hier kann man Tests durchführen; diese Datei wird nicht kompiliert, wenn dieses Paket als Erweiterung verwendet wird.\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1744375712063,"editorVersion":"7.0.3","text":{"main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Shared Variables\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1744377512083,"editorVersion":"7.0.3","text":{"main.ts":"shared.init()","README.md":"","shared.ts":"/**\n * Shared Variables\n */\n//% weight=100 color=#f03056 icon=\"ᯤ\"\nnamespace shared {\n    /**\n     * reference only, not used\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    function foo (n: number, s: string): void {\n        // Add code here\n    }\n\n    let names: any[] = []\n    let values: any[] = []\n\n    //%block\n    export function init(group: number = 1) {\n        radio.setGroup(group)\n    }\n\n    export function receive (received_string: string) { //TODO: sync_only\n        let parts = received_string.split(\";\")\n        let task = parts[0]\n        let variable_name = parts[1]\n\n        if (task == \"s\") { //set\n            let variable_type = parts[2]\n            let value = null\n\n            switch (variable_type) {\n                case \"n\": //number\n                    value = +parts[3]\n                    break\n                case \"s\": //string\n                    value = parts[3]\n                    break\n                case \"l\": //list\n                    value = JSON.parse(parts[3])\n                    break\n            }\n\n            if (names.indexOf(variable_name) == -1) {\n                names.push(variable_name)\n                values.push(value)\n                return\n            }\n\n            values[names.indexOf(variable_name)] = value\n        }\n    }\n\n    //%block\n    export function set (variable_name: string, value: number|string|any[]) { //TODO: sync_only\n        if (names.indexOf(variable_name) == -1) {\n            names.push(variable_name)\n            values.push(value)\n        }\n        else {\n            values[names.indexOf(variable_name)] = value\n        }\n\n        let str\n    }\n\n    //%block\n    export function get (variable_name: string) {\n        if (names.indexOf(variable_name) == -1) { return }\n        return values[names.indexOf(variable_name)]\n    }\n}\n\n\nradio.onReceivedString(function(receivedString: string) {\n    shared.receive(receivedString)\n})","pxt.json":"{\n    \"name\": \"Shared Variables\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"v3\": \"*\",\n        \"funk\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"shared.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1744395964599,"editorVersion":"7.0.3","text":{"main.ts":"console.log(JSON.stringify(\"hello\"))\nconsole.log(JSON.stringify(\"123\"))\nconsole.log(JSON.stringify('[\"just\", \"a\", \"test\"]'))\nlet a = [\"just\", \"a\", \"test\"]\nconsole.log(a == JSON.parse(JSON.stringify(a)))","README.md":"","shared.ts":"/**\n * Shared Variables\n */\n//% weight=100 color=#f03056 icon=\"ᯤ\"\nnamespace shared {\n    /**\n     * reference only, not used\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    function foo (n: number, s: string): void {\n        // Add code here\n    }\n\n    let names: any[] = []\n    let values: any[] = []\n\n    //%block\n    export function init(group: number = 1) {\n        radio.setGroup(group)\n    }\n\n    export function receive (received_string: string) { //TODO: sync_only\n        let parts = received_string.split(\";\")\n        let task = parts[0]\n        let variable_name = parts[1]\n\n        if (task == \"s\") { //set\n            let variable_type = parts[2]\n            let value = null\n\n            switch (variable_type) {\n                case \"n\": //number\n                    value = +parts[3]\n                    break\n                case \"s\": //string\n                    value = parts[3]\n                    break\n                case \"l\": //list\n                    value = JSON.parse(parts[3])\n                    break\n            }\n\n            if (names.indexOf(variable_name) == -1) {\n                names.push(variable_name)\n                values.push(value)\n                return\n            }\n\n            values[names.indexOf(variable_name)] = value\n        }\n    }\n\n    //%block\n    export function set (variable_name: string, value: number|string|any[]) { //TODO: sync_only\n        if (names.indexOf(variable_name) == -1) {\n            names.push(variable_name)\n            values.push(value)\n        }\n        else {\n            values[names.indexOf(variable_name)] = value\n        }\n\n        let variable_type = null\n\n        switch (typeof value) {\n            case \"number\":\n                variable_type = \"n\"\n                break\n            case \"string\":\n                variable_type = \"s\"\n                break\n                variable_type = \"l\"\n        }\n\n        let str = \"s;\" + variable_name + \";\" + variable_type + \";\" + JSON.stringify(value)\n    }\n\n    //%block\n    export function get (variable_name: string) {\n        if (names.indexOf(variable_name) == -1) { return }\n        return values[names.indexOf(variable_name)]\n    }\n}\n\n\nradio.onReceivedString(function(receivedString: string) {\n    shared.receive(receivedString)\n})","pxt.json":"{\n    \"name\": \"Shared Variables\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"v3\": \"*\",\n        \"funk\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"shared.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}}],"shares":[],"lastSaveTime":1744396561631}